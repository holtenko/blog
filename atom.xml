<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小天涯</title>
  
  <subtitle>Make your own way.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://holtenko.github.io/blog/"/>
  <updated>2019-12-12T02:37:32.211Z</updated>
  <id>https://holtenko.github.io/blog/</id>
  
  <author>
    <name>Holten</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>StarUML 3.0.1 激活教程</title>
    <link href="https://holtenko.github.io/blog/2018/07/30/staruml-activate/"/>
    <id>https://holtenko.github.io/blog/2018/07/30/staruml-activate/</id>
    <published>2018-07-30T13:18:10.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装asar"><a href="#安装asar" class="headerlink" title="安装asar"></a>安装asar</h2><p><code>npm install -g asar</code></p><h2 id="解压app-asar"><a href="#解压app-asar" class="headerlink" title="解压app.asar"></a>解压app.asar</h2><p>进入到<code>app.asar</code>目录下执行当前命令。默认文件路径Windows是<code>C:\Program Files\StarUML\resources</code>，Mac是<code>/Applications/StarUML.app/Contents/Resources</code>。</p><p><code>asar extract app.asar app</code></p><h2 id="修改激活代码"><a href="#修改激活代码" class="headerlink" title="修改激活代码"></a>修改激活代码</h2><p>解压之后当前文件夹下有一个新的目录<code>app</code>，真正的验证license的代码在<code>app\src\engine\license-manager.js</code>，把的这两个方法替换掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">checkLicenseValidity () &#123;</span><br><span class="line">    <span class="keyword">this</span>.validate().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setStatus(<span class="keyword">this</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;, () =&gt; &#123;</span><br><span class="line">      <span class="comment">//setStatus(this, false)</span></span><br><span class="line">     <span class="comment">// UnregisteredDialog.showDialog()</span></span><br><span class="line">     setStatus(<span class="keyword">this</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Check the license key in server and store it as license.key file in local</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">licenseKey</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  register (licenseKey) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      $.post(app.config.validation_url, &#123;<span class="attr">licenseKey</span>: licenseKey&#125;)</span><br><span class="line">        .done(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> file = path.join(app.getUserPath(), <span class="string">'/license.key'</span>)</span><br><span class="line">          fs.writeFileSync(file, <span class="built_in">JSON</span>.stringify(data, <span class="number">2</span>))</span><br><span class="line">          licenseInfo = data</span><br><span class="line">          setStatus(<span class="keyword">this</span>, <span class="literal">true</span>)</span><br><span class="line">          resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">        .fail(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          setStatus(<span class="keyword">this</span>, <span class="literal">true</span>)</span><br><span class="line">          <span class="comment">//if (err.status === 499) &#123; /* License key not exists */</span></span><br><span class="line">           <span class="comment">// reject('invalid')</span></span><br><span class="line">          <span class="comment">//&#125; else &#123;</span></span><br><span class="line">          <span class="comment">//  reject()</span></span><br><span class="line">          <span class="comment">//&#125;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="重新打包替换原来的app-asar"><a href="#重新打包替换原来的app-asar" class="headerlink" title="重新打包替换原来的app.asar"></a>重新打包替换原来的app.asar</h2><p><code>asar pack app app.asar</code></p><h2 id="启动StarUML-开始工作吧"><a href="#启动StarUML-开始工作吧" class="headerlink" title="启动StarUML 开始工作吧"></a>启动StarUML 开始工作吧</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装asar&quot;&gt;&lt;a href=&quot;#安装asar&quot; class=&quot;headerlink&quot; title=&quot;安装asar&quot;&gt;&lt;/a&gt;安装asar&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm install -g asar&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;解压app-asa
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/tags/Linux/"/>
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>没事学点设计模式-单例模式</title>
    <link href="https://holtenko.github.io/blog/2018/03/22/design-pattern-4/"/>
    <id>https://holtenko.github.io/blog/2018/03/22/design-pattern-4/</id>
    <published>2018-03-22T06:37:45.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="系列回顾"><a href="#系列回顾" class="headerlink" title="系列回顾"></a>系列回顾</h3><ol><li><a href="/2017/09/11/design-pattern-1">没事学点设计模式-概览</a></li><li><a href="/2017/09/29/design-pattern-2">没事学点设计模式-工厂模式</a></li><li><a href="/2018/02/12/design-pattern-3">没事学点设计模式-抽象工厂模式</a></li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>单例模式（Singleton Pattern）可以说是Java中最简单的设计模式。这种类型的设计模式属于创建型模式，它提供了一种创建一个全局唯一对象的最佳方式，可以避免一个全局使用的对象，尤其是大对象，的频繁创建与销毁。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象实例，同时确保只有一个对象实例被创建。这个类提供了访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。这就意味着单例类只能有一个实例，而且必须自己给自己创建唯一的实例，同时必须给其他所有对象提供这一实例。</p><p><strong>优点</strong></p><ol><li>在单例模式中，对单例类的所有实例化得到的都是相同的一个实例，可以确保所有的对象都访问同一个实例。</li><li>类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li><li>提供了对唯一实例的受控访问。</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，当需要频繁创建和销毁的对象，特别是大对象时可以提高系统的性能。</li><li>避免对共享资源的多重占用。</li></ol><p><strong>缺点</strong></p><ol><li>无法继承，扩展比较困难。</li><li>不适用于变化的对象。</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>单例模式的实现有非常多，但是有些是线程安全的，有些是线程不安全的，这里仅介绍几种线程安全的实现方法。</p><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>这种方式可以实现懒加载，线程安全，但是会存在效率问题，因为绝大多数情况下是不需要同步加锁的。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>这种方式基于classloader机制避免了线程安全问题，但是实例在类加载时就实例化了，可能会产生垃圾对象。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重校验式"><a href="#双重校验式" class="headerlink" title="双重校验式"></a>双重校验式</h4><p>这种方式采用双重校验锁的机制，可以保证线程安全且可以保证较好的性能。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类式"><a href="#静态内部类式" class="headerlink" title="静态内部类式"></a>静态内部类式</h4><p>这种方式和饿汉式采用相同的机制来保证线程安全，但是通过静态内部类的形式实现了懒加载，避免了垃圾对象的产生。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举式"><a href="#枚举式" class="headerlink" title="枚举式"></a>枚举式</h4><p>这种方式在实际使用中很少被采用，但是这确实是目前实现单例最好的方式，简洁，自动支持序列化机制，绝对防止多次实例化，也无法通过反射调用构造函数的方式来创建实例。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">yourMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本文源码已托管至GitHub，欢迎Star"><a href="#本文源码已托管至GitHub，欢迎Star" class="headerlink" title="本文源码已托管至GitHub，欢迎Star"></a>本文源码已托管至GitHub，欢迎Star</h3><p><a href="https://github.com/holtenko/DesignPatterns/tree/master/src/Singleton" target="_blank" rel="noopener">抽象工厂模式源码：https://github.com/holtenko/DesignPatterns/tree/master/src/Singleton</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;系列回顾&quot;&gt;&lt;a href=&quot;#系列回顾&quot; class=&quot;headerlink&quot; title=&quot;系列回顾&quot;&gt;&lt;/a&gt;系列回顾&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/09/11/design-pattern-1&quot;&gt;没事学点设计模式-概览&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>web.xml配置过程中的常见错误</title>
    <link href="https://holtenko.github.io/blog/2018/02/24/web-xml-error/"/>
    <id>https://holtenko.github.io/blog/2018/02/24/web-xml-error/</id>
    <published>2018-02-24T06:58:29.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-content-of-element-type-“web-app”-must-match"><a href="#The-content-of-element-type-“web-app”-must-match" class="headerlink" title="The content of element type “web-app” must match"></a>The content of element type “web-app” must match</h2><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>web.xml中<code>&lt;web-app&gt;</code>标签的元素个数和排序规则是有限制的，大多数情况下出现该错误的原因是元素排放顺序有误。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决其实也很简单，按照要求将各元素排序即可，具体排序如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">The web-app element is the root of the deployment descriptor for</span></span><br><span class="line"><span class="comment">a web application.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">web-app</span> (<span class="meta-keyword">icon</span>?, <span class="meta-keyword">display-name</span>?, <span class="meta-keyword">description</span>?, <span class="meta-keyword">distributable</span>?,</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">context-param</span>*, <span class="meta-keyword">filter</span>*, <span class="meta-keyword">filter-mapping</span>*, <span class="meta-keyword">listener</span>*, <span class="meta-keyword">servlet</span>*,</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">servlet-mapping</span>*, <span class="meta-keyword">session-config</span>?, <span class="meta-keyword">mime-mapping</span>*, <span class="meta-keyword">welcome-file-list</span>?,</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">error-page</span>*, <span class="meta-keyword">taglib</span>*, <span class="meta-keyword">resource-env-ref</span>*, <span class="meta-keyword">resource-ref</span>*, <span class="meta-keyword">security-constraint</span>*,</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">login-config</span>?, <span class="meta-keyword">security-role</span>*, <span class="meta-keyword">env-entry</span>*, <span class="meta-keyword">ejb-ref</span>*,  <span class="meta-keyword">ejb-local-ref</span>*)&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;The-content-of-element-type-“web-app”-must-match&quot;&gt;&lt;a href=&quot;#The-content-of-element-type-“web-app”-must-match&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/categories/Java/"/>
    
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Java" scheme="https://holtenko.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://holtenko.github.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>没事学点设计模式-抽象工厂模式</title>
    <link href="https://holtenko.github.io/blog/2018/02/12/design-pattern-3/"/>
    <id>https://holtenko.github.io/blog/2018/02/12/design-pattern-3/</id>
    <published>2018-02-12T05:56:14.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="系列回顾"><a href="#系列回顾" class="headerlink" title="系列回顾"></a>系列回顾</h3><ol><li><a href="/2017/09/11/design-pattern-1">没事学点设计模式-概览</a></li><li><a href="/2017/09/29/design-pattern-2">没事学点设计模式-工厂模式</a></li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><p><strong>举例说明</strong><br>iPhone 8和iPhone X的屏幕和外壳都是不一样的，通过抽象工厂模式就可以实现，在为iPhone生产配件的时候不用指定相关的型号，可以自动根据手机的型号生产相应的配件。</p><p><strong>优点</strong><br>当一个系列中的多个对象被设计成一起工作时，它能保证调用时始终只使用同一个系列中的对象，而不需要去指定具体的型号。</p><p><strong>缺点</strong><br>系列扩展非常困难，要增加一个系列的某一产品时，既要在抽象的 Factory 里加代码，又要在具体的实现里面加代码。比如后面发现iPhone X配AirPods，iPhone 8配EarPods，那么不仅要Factory接口中添加方法，还要在其实现类中去修改。</p><p><strong>使用场景</strong></p><ol><li>软件的更换界面主题功能；</li><li>生成不同操作系统的软件；</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>1.首先需要创建一个Screen、Shell接口和其实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen8</span> <span class="keyword">implements</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone 8 screen get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenX</span> <span class="keyword">implements</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone X screen get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell8</span> <span class="keyword">implements</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone 8 shell get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellX</span> <span class="keyword">implements</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone X shell get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.然后定义抽象工厂接口IphoneFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Screen <span class="title">getScreen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Shell <span class="title">getShell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实现相应的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone8Factory</span> <span class="keyword">implements</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">getScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Screen8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shell <span class="title">getShell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Shell8();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IphoneXFactory</span> <span class="keyword">implements</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">getScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScreenX();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shell <span class="title">getShell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShellX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.可以生产了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IphoneFactory factory = <span class="keyword">new</span> IphoneXFactory();</span><br><span class="line">        Screen screen = factory.getScreen();</span><br><span class="line">        Shell shell = factory.getShell();</span><br><span class="line">        screen.build();</span><br><span class="line">        shell.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本文源码已托管至GitHub，欢迎Star"><a href="#本文源码已托管至GitHub，欢迎Star" class="headerlink" title="本文源码已托管至GitHub，欢迎Star"></a>本文源码已托管至GitHub，欢迎Star</h3><p><a href="https://github.com/holtenko/DesignPatterns/tree/master/src/AbstractFactory" target="_blank" rel="noopener">抽象工厂模式源码：https://github.com/holtenko/DesignPatterns/tree/master/src/AbstractFactory</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;系列回顾&quot;&gt;&lt;a href=&quot;#系列回顾&quot; class=&quot;headerlink&quot; title=&quot;系列回顾&quot;&gt;&lt;/a&gt;系列回顾&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/09/11/design-pattern-1&quot;&gt;没事学点设计模式-概览&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="https://holtenko.github.io/blog/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何正确地给 github 的开源项目提交 pull request</title>
    <link href="https://holtenko.github.io/blog/2018/01/30/pullrequest-github/"/>
    <id>https://holtenko.github.io/blog/2018/01/30/pullrequest-github/</id>
    <published>2018-01-30T07:51:27.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<ol><li>fork 原始仓库</li><li>clone 自己的仓库</li><li>在 master 分支添加原始仓库为远程分支 git remote add upstream 远程仓库</li><li>自己分支开发，如 dev 分支开发：git checkout -b dev</li><li>本地 dev 提交</li><li>切换 master 分支，同步原始仓库：git checkout master， git pull upstream master</li><li>切换本地 dev 分支，合并本地 master 分支（已经和原始仓库同步），可能需要解冲突</li><li>提交本地 dev 分支到自己的远程 dev 仓库</li><li>现在才是给原始仓库发 pull request 请求</li><li>等待原作者回复（接受/拒绝）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;fork 原始仓库&lt;/li&gt;
&lt;li&gt;clone 自己的仓库&lt;/li&gt;
&lt;li&gt;在 master 分支添加原始仓库为远程分支 git remote add upstream 远程仓库&lt;/li&gt;
&lt;li&gt;自己分支开发，如 dev 分支开发：git checkout
      
    
    </summary>
    
    
      <category term="Git" scheme="https://holtenko.github.io/blog/categories/Git/"/>
    
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Git" scheme="https://holtenko.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat常见错误</title>
    <link href="https://holtenko.github.io/blog/2018/01/30/tomcat-errors/"/>
    <id>https://holtenko.github.io/blog/2018/01/30/tomcat-errors/</id>
    <published>2018-01-30T03:35:26.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-Status-500-java-lang-IllegalStateException-No-output-folder"><a href="#HTTP-Status-500-java-lang-IllegalStateException-No-output-folder" class="headerlink" title="HTTP Status 500 - java.lang.IllegalStateException: No output folder"></a>HTTP Status 500 - java.lang.IllegalStateException: No output folder</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>此错误一般是由于解压缩版的Tomcat没有合理分配权限导致的。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>可通过修改Tomcat目录权限，或修改其拥有者来解决。</p><ol><li>修改Tomcat目录权限：<code>sudo chmod -R 777 $TOMCAT_HOME</code>。</li><li>修改拥有者：<code>sudo chown -R yourUserName $TOMCAT_HOME</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP-Status-500-java-lang-IllegalStateException-No-output-folder&quot;&gt;&lt;a href=&quot;#HTTP-Status-500-java-lang-IllegalStateException-No-outpu
      
    
    </summary>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/categories/Java/"/>
    
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Error" scheme="https://holtenko.github.io/blog/tags/Error/"/>
    
      <category term="Java" scheme="https://holtenko.github.io/blog/tags/Java/"/>
    
      <category term="Tomcat" scheme="https://holtenko.github.io/blog/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJIdea快捷键</title>
    <link href="https://holtenko.github.io/blog/2018/01/23/intelliJ-idea-keymap/"/>
    <id>https://holtenko.github.io/blog/2018/01/23/intelliJ-idea-keymap/</id>
    <published>2018-01-23T09:05:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<p><code>Ctrl+Shift+方向键Up/Down</code> 代码向上/下移动</p><p><code>Ctrl+X</code> 删除行</p><p><code>Ctrl+Y</code> 也是删除行，不知道有啥区别</p><p><code>Ctrl+D</code> 复制行</p><p><code>Ctrl+Alt+L</code> 格式化代码</p><p><code>Ctrl+N</code> 查找类</p><p><code>Ctrl+Shift+N</code> 查找文件</p><p><code>Alt+Enter</code> 智能导入包，自动修正</p><p><code>Ctrl+Alt+O</code> 优化导入的类和包</p><p><code>Alt+Insert</code> 生成代码(如get，set方法，构造函数等)</p><p><code>Ctrl+E</code> 最近更改的文件</p><p><code>Alt+Shift+C</code> 最近更改的代码</p><p><code>Ctrl+Shift+Space</code> 自动补全代码</p><p><code>Ctrl+Alt+Space</code> 类名或接口名提示</p><p><code>Ctrl+空格</code> 代码提示(Windows下这个会被占用)</p><p><code>Ctrl+P</code> 方法参数提示</p><p><code>Ctrl+Shift+Alt+N</code> 查找类中的方法或变量</p><p><code>Ctrl+R</code> 文件内替换文本</p><p><code>Ctrl+F</code> 文件内查找文本</p><p><code>Shift+F6</code> 重构-重命名</p><p><code>Ctrl+/</code> 注释//</p><p><code>Ctrl+Shift+/</code> 注释/…/</p><p><code>Ctrl+J</code> 自动代码</p><p><code>Ctrl+H</code> 显示类结构图(继承关系)</p><p><code>Alt+F1</code> 查找代码所在位置</p><p><code>Alt+1</code> 快速打开或隐藏工程面板</p><p><code>Ctrl+Alt+ left/right</code> 返回至上次浏览的位置</p><p><code>Alt+ left/right</code> 切换代码Tab</p><p><code>Alt+ Up/Down</code> 移动到上一个/下一个方法</p><p><code>F2</code> 警告快速定位</p><p><code>Ctrl+W</code> 选中代码，连续按会有其他效果</p><p><code>Ctrl+Up/Down</code> 光标跳转到第一行或最后一行</p><p><code>Ctrl+B或Ctrl+左键</code> 快速打开光标处的类或方法</p><p><code>Shift＋左键</code> 可以关闭文件</p><p><code>Ctrl＋Shift＋Backspace</code> 可以跳转到上次编辑的地方</p><p><code>Ctrl＋F12</code> 可以显示当前文件的结构</p><p><code>Ctrl＋F7</code> 可以查询当前元素在当前文件中的引用，然后按F3可以选择</p><p><code>Ctrl＋Shift＋Insert</code> 可以选择剪贴板内容并插入</p><p><code>Ctrl＋Alt＋V</code> 可以把括号内的内容抽离为一个变量</p><p><code>Ctrl＋Alt＋T</code> 可以把代码包在一块内，例如try/catch</p><p><code>Ctrl＋O</code> 可以选择父类的方法进行重写</p><p><code>Ctrl＋Shift＋J</code> 可以整合两行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Ctrl+Shift+方向键Up/Down&lt;/code&gt; 代码向上/下移动&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+X&lt;/code&gt; 删除行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+Y&lt;/code&gt; 也是删除行，不知道有啥区别&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+D&lt;/
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://holtenko.github.io/blog/categories/Tools/"/>
    
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Tools" scheme="https://holtenko.github.io/blog/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>没事学点设计模式-工厂模式</title>
    <link href="https://holtenko.github.io/blog/2017/09/29/design-pattern-2/"/>
    <id>https://holtenko.github.io/blog/2017/09/29/design-pattern-2/</id>
    <published>2017-09-29T01:23:52.000Z</published>
    <updated>2018-02-12T05:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="系列回顾"><a href="#系列回顾" class="headerlink" title="系列回顾"></a>系列回顾</h3><ol><li><a href="/2017/09/11/design-pattern-1">没事学点设计模式-概览</a></li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>工厂模式（Factory Pattern）是一种最常用的设计模式。这种类型的设计模式属于创建型模式，它提供了一种方便快捷创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不需要向调用方暴露创建对象的具体逻辑流程，并且是通过使用一个共同的接口来指向新创建的对象。工厂模式定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行，用以解决接口选择的问题。</p><p><strong>举例说明</strong></p><ol><li>我要买一辆汽车，我可以直接从工厂里面提货，而不用去关心这辆汽车是如何生产出来的，以及这个汽车里面的各种细节是什么样子的。</li><li>我要买一部手机，我也不需要知道手机是怎么制造出来的，我只需要知道我想要iPhoneX还是还是HUAWEI P10，工厂自然会帮我制造出来。</li></ol><p><strong>优点</strong></p><ol><li>创建一个对象，只要知道其名称就可以了，就比如我只需要知道那款手机叫iPhoneX就可以了；</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以了；</li><li>屏蔽具体实现，用户只关心接口即可。</li></ol><p><strong>缺点</strong><br>每增加一个实现时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p><p><strong>使用场景</strong></p><ol><li>日志记录器：记录可能记录到本地文件、远程服务器、打印到终端等，用户只需要知道要记录到哪里说明即可。</li><li>数据库访问：当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时，现在是Oracle，有可能换到MySQL等，此时只需换方言和驱动就可以。</li><li>设计一个连接服务器的框架，可以通过”TCP”或者”UDP”或者其他协议,可以把这些都作为产品类，共同实现一个接口即可。</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>我们以生产iPhone的生产工厂为例。</p><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>1.首先需要创建一个iphone接口和其实现类：接口iphone，实现类iphone7\iphone8\iphonex；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone7</span> <span class="keyword">implements</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone7 get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone8</span> <span class="keyword">implements</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone8 get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphonex</span> <span class="keyword">implements</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphonex get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.然后定义工厂类iphoneFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iphone <span class="title">getIphone</span><span class="params">(String iphoneType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iphoneType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (iphoneType.equalsIgnoreCase(<span class="string">"iphone7"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Iphone7();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iphoneType.equalsIgnoreCase(<span class="string">"iphone8"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Iphone8();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iphoneType.equalsIgnoreCase(<span class="string">"iphonex"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Iphonex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.然后就可以随意生产了，比如先来一个iphonex哈哈哈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IphoneFactory iphonefactory = <span class="keyword">new</span> IphoneFactory();</span><br><span class="line">        Iphone iphone = iphonefactory.getIphone(<span class="string">"iphonex"</span>);</span><br><span class="line">        iphone.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>1.首先需要创建一个iphone接口和其实现类：接口iphone，实现类iphone7\iphone8\iphonex；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone7</span> <span class="keyword">implements</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone7 get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone8</span> <span class="keyword">implements</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphone8 get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphonex</span> <span class="keyword">implements</span> <span class="title">Iphone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"iphonex get!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.然后定义工厂接口iphoneFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iphone <span class="title">getIphone</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>3.实现工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone7Factory</span> <span class="keyword">implements</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iphone <span class="title">getIphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iphone7();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone8Factory</span> <span class="keyword">implements</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iphone <span class="title">getIphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iphone8();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IphonexFactory</span> <span class="keyword">implements</span> <span class="title">IphoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iphone <span class="title">getIphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iphonex();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.然后就也可以随意生产了，比如再来一个iphone8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IphoneFactory iphonefactory = <span class="keyword">new</span> Iphone8Factory();</span><br><span class="line">        Iphone iphone = iphonefactory.getIphone();</span><br><span class="line">        iphone.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本文源码已托管至GitHub，欢迎Star"><a href="#本文源码已托管至GitHub，欢迎Star" class="headerlink" title="本文源码已托管至GitHub，欢迎Star"></a>本文源码已托管至GitHub，欢迎Star</h3><p><a href="https://github.com/holtenko/DesignPatterns/tree/master/src/Factory" target="_blank" rel="noopener">工厂模式源码：https://github.com/holtenko/DesignPatterns/tree/master/src/Factory</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;系列回顾&quot;&gt;&lt;a href=&quot;#系列回顾&quot; class=&quot;headerlink&quot; title=&quot;系列回顾&quot;&gt;&lt;/a&gt;系列回顾&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/09/11/design-pattern-1&quot;&gt;没事学点设计模式-概览&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>FTP常见错误及解决方案</title>
    <link href="https://holtenko.github.io/blog/2017/09/18/ftp-errors-and-solutions/"/>
    <id>https://holtenko.github.io/blog/2017/09/18/ftp-errors-and-solutions/</id>
    <published>2017-09-18T07:27:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="227-Entering-Passive-Mode"><a href="#227-Entering-Passive-Mode" class="headerlink" title="227 Entering Passive Mode"></a>227 Entering Passive Mode</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应: 227 Entering Passive Mode (192,168,1,16,221,111).</span><br><span class="line">命令: LIST</span><br><span class="line">错误: 连接超时</span><br><span class="line">错误: 读取目录列表失败</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ol><li>打开<code>/etc/vsftpd/vsftpd.conf</code>在最后面加入如下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pasv_min_port=1</span><br><span class="line">pasv_max_port=30999</span><br></pre></td></tr></table></figure><ol start="2"><li>在iptable防火墙规则中加入如下规则：<br>打开<code>/etc/sysconfig/iptables</code>加入如下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state –state NEW -m tcp -p tcp –dport 1:30999 -j ACCEPT</span><br></pre></td></tr></table></figure><ol start="3"><li>重启vsftp和iptables服务了。<ul><li>重启vsftp服务<code>service vsftpd restart</code></li><li>重启iptables服务<code>service iptables restart</code></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;227-Entering-Passive-Mode&quot;&gt;&lt;a href=&quot;#227-Entering-Passive-Mode&quot; class=&quot;headerlink&quot; title=&quot;227 Entering Passive Mode&quot;&gt;&lt;/a&gt;227 Enterin
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/tags/Linux/"/>
    
      <category term="FTP" scheme="https://holtenko.github.io/blog/tags/FTP/"/>
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Error" scheme="https://holtenko.github.io/blog/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下FTP服务器安装与配置</title>
    <link href="https://holtenko.github.io/blog/2017/09/17/ftp-install-centos/"/>
    <id>https://holtenko.github.io/blog/2017/09/17/ftp-install-centos/</id>
    <published>2017-09-17T07:27:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftpd</span><br></pre></td></tr></table></figure><h2 id="启动-重启-关闭vsftpd服务器"><a href="#启动-重启-关闭vsftpd服务器" class="headerlink" title="启动/重启/关闭vsftpd服务器"></a>启动/重启/关闭vsftpd服务器</h2><p>CentOS7 以下：</p><ul><li>启动: <code>service vsftpd start</code></li><li>停止: <code>service vsftpd stop</code></li><li>重启: <code>service vsftpd restart</code></li><li>执行完成后可以使用<code>service vsftpd status</code>查看运行状态</li><li>CentOS7：</li><li>启动: <code>/bin/systemctl start vsftpd.service</code></li><li>停止: <code>/bin/systemctl stop vsftpd.service</code></li><li>重启: <code>/bin/systemctl restart vsftpd.service</code></li><li>执行完成后可以使用<code>/bin/systemctl status vsftpd.service</code>查看状态</li></ul><h2 id="与vsftpd服务器有关的文件和文件夹"><a href="#与vsftpd服务器有关的文件和文件夹" class="headerlink" title="与vsftpd服务器有关的文件和文件夹"></a>与vsftpd服务器有关的文件和文件夹</h2><ul><li>vsftpd服务器的配置文件的是: <code>/etc/vsftpd/vsftpd.conf</code></li></ul><h2 id="定制进入FTP服务器的欢迎信息"><a href="#定制进入FTP服务器的欢迎信息" class="headerlink" title="定制进入FTP服务器的欢迎信息"></a>定制进入FTP服务器的欢迎信息</h2><p>在vsftpd.conf文件中设置:<code>dirmessage_enable=yes</code>,然后进入用户目录建立一个<code>.message</code>文件,输入欢迎信息即可。</p><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><p>找到/etc/rc.local文件，在最后一行添加：<code>service vsftpd start</code> ,保存，退出</p><h2 id="配置vsftpd-conf"><a href="#配置vsftpd-conf" class="headerlink" title="配置vsftpd.conf"></a>配置vsftpd.conf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO                                  #禁止匿名</span><br><span class="line">local_enable=YES                                     #允许本地登录</span><br><span class="line">write_enable=YES                                     #允许写，如需上传，则必须</span><br><span class="line">local_umask=027                                      #将上传文件的权限设置为：777-local_umask</span><br><span class="line">anon_upload_enable=YES                               # 允许虚拟用户和匿名用户上传</span><br><span class="line">anon_other_write_enable=YES                          #允许虚拟用户和匿名用户修改文件名和删除文件</span><br><span class="line">dirmessage_enable=YES          </span><br><span class="line">xferlog_enable=YES                                   #打开日志记录</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_file=/var/log/vsftpd.log                     #日志存放位置</span><br><span class="line">xferlog_std_format=YES                               #标准日志格式</span><br><span class="line">idle_session_timeout=600                             #空闲连接超时</span><br><span class="line">data_connection_timeout=120</span><br><span class="line">ftpd_banner=Welcome to Holten FTP service            #欢迎信息</span><br><span class="line">guest_enable=yes                                     #允许虚拟用户</span><br><span class="line">guest_username=vsftpdguest                           #虚拟用户使用的系统账号</span><br><span class="line">virtual_use_local_privs=YES                          #虚拟用户拥有本地系统权限</span><br><span class="line">chroot_local_user=NO              </span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash">以上两行将虚拟用户限制在其目录下，不能访问其他目录，或者直接用                            </span></span><br><span class="line">chroot_local_user=YES                               </span><br><span class="line">listen=yes                                           #监听/被动模式</span><br><span class="line">listen_port=21                                       #监听端口</span><br><span class="line">chroot_list_file=/etc/vsftpd/vsftpd.chroot_list      #虚拟用户名单保存在文件 /etc/vsftpd/vsftpd.chroot_list 中</span><br><span class="line">user_config_dir=/etc/vsftpd/vsftpd_user_conf         #每个虚拟用户名的更加详细的配置保存在 /etc/vsftpd/vsftpd_user_conf 中</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装vsftpd&quot;&gt;&lt;a href=&quot;#安装vsftpd&quot; class=&quot;headerlink&quot; title=&quot;安装vsftpd&quot;&gt;&lt;/a&gt;安装vsftpd&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/tags/Linux/"/>
    
      <category term="FTP" scheme="https://holtenko.github.io/blog/tags/FTP/"/>
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>Mac下更新Vim到最新版本</title>
    <link href="https://holtenko.github.io/blog/2017/09/16/update-vim-Mac/"/>
    <id>https://holtenko.github.io/blog/2017/09/16/update-vim-Mac/</id>
    <published>2017-09-16T07:27:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<p>目前，Mac内置的Vim是7.3版本的，而且还缺少很多功能，下面介绍如何通过源码安装更新最新版本的Vim，同时保留系统内置的Vim。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载Vim源代码</span></span><br><span class="line">git clone https://github.com/vim/vim.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入源码的src目录</span></span><br><span class="line">cd vim/src</span><br><span class="line"><span class="meta">#</span><span class="bash">配置、安装</span></span><br><span class="line">./configure --enable-pythoninterp </span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载的话 make uninstall</span></span><br></pre></td></tr></table></figure><p>此时，Vim被安装在了<code>/usr/local/bin</code>下，重启终端后，可以通过<code>which vim</code>查看。</p><p>此时，一般来说在终端里执行vim命令的话就应该是新版本的vim了，需要说明的是，这是因为系统内置的vim在<code>/usr/bin</code>目录下，而$PATH里<code>/usr/local/bin</code>在<code>/usr/bin</code>之前，所以系统会先找到刚安装的vim，所以如果你发现没有使用新版本的vim，请<code>echo $PATH</code>查看确认。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前，Mac内置的Vim是7.3版本的，而且还缺少很多功能，下面介绍如何通过源码安装更新最新版本的Vim，同时保留系统内置的Vim。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://holtenko.github.io/blog/categories/Tools/"/>
    
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Tools" scheme="https://holtenko.github.io/blog/tags/Tools/"/>
    
      <category term="Mac" scheme="https://holtenko.github.io/blog/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>树莓派系统安装配置</title>
    <link href="https://holtenko.github.io/blog/2017/09/13/raspberry-setup/"/>
    <id>https://holtenko.github.io/blog/2017/09/13/raspberry-setup/</id>
    <published>2017-09-13T07:27:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><ol><li>格式化内存卡。一定要为<strong>FAT32</strong>，Windows下32G以上内存卡可用<a href="http://pan.baidu.com/s/1kUEPxaf" target="_blank" rel="noopener">guiformat-x64.exe</a>格式化。</li><li>将<a href="http://pan.baidu.com/s/1qYwE7yW" target="_blank" rel="noopener">NOOBS_v2_0_0.zip</a>解压，然后将解压后的文件夹内的所有文件复制到内存卡。</li><li>将内存卡插入树莓派，使用5V，至少2A以上电源供电，连接显示器，启动树莓派。</li><li>在此选择默认的Raspbian，点击Install进行安装。</li></ol><h2 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h2><ol><li>连接网络，确认网络可用。</li><li>命令行执行<code>sudo apt-get update</code></li><li>命令行执行<code>sudo apt-get upgrade</code></li></ol><h2 id="配置常用环境"><a href="#配置常用环境" class="headerlink" title="配置常用环境"></a>配置常用环境</h2><h3 id="语言环境"><a href="#语言环境" class="headerlink" title="语言环境"></a>语言环境</h3><p><code>Preference-Raspberry Pi Configuration-Localisation-Set Locale...</code></p><p>选择<code>zh(Chinese)</code>。<br>==== 时区环境 ====<br><code>Preference-Raspberry Pi Configuration-Localisation-Set Timezone...</code></p><p>选择<code>Asia，Shanghai</code>。</p><h3 id="其它环境"><a href="#其它环境" class="headerlink" title="其它环境"></a>其它环境</h3><p>开启<code>Preference-Raspberry Pi Configuration-Interface-SSH</code>。</p><p>其它如Keyboard，WiFi Country自己设置一下为China。</p><h3 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h3><ol><li>Java路径：<code>/usr/lib/jvm/jdk-x-xxx</code>，具体路径的最后一层可能会有更新。</li><li>配置环境变量<code>vim /etc/profile</code>,在文件最后添加如下内容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk-x-xxx</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib</span><br></pre></td></tr></table></figure><p>保存文件，然后执行以下<code>source /etc/profile</code>,使配置文件生效即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统安装&quot;&gt;&lt;a href=&quot;#系统安装&quot; class=&quot;headerlink&quot; title=&quot;系统安装&quot;&gt;&lt;/a&gt;系统安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;格式化内存卡。一定要为&lt;strong&gt;FAT32&lt;/strong&gt;，Windows下32G以上内存卡可用&lt;a h
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://holtenko.github.io/blog/tags/Linux/"/>
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Raspberry" scheme="https://holtenko.github.io/blog/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>静态变量的自动注入值</title>
    <link href="https://holtenko.github.io/blog/2017/09/12/static-variables-di/"/>
    <id>https://holtenko.github.io/blog/2017/09/12/static-variables-di/</id>
    <published>2017-09-12T10:27:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<p>做项目的时候有可能会经常发生这样的事情，就是要在静态方法里面调用其他类的方法，如果直接new一个出来的话，有可能会造成该类和该类里面的其他依赖类无法正常的注入，如果直接<code>@Autowired</code>在这个静态变量上的话会造成该变量还是null。</p><h2 id="为什么呢？"><a href="#为什么呢？" class="headerlink" title="为什么呢？"></a>为什么呢？</h2><p>因为静态变量不是一个对象，只是类的引用，而类被加载字节码的时候，变量已经初始化了，也就是给该变量分配内存了，导致spring忽略静态变量。</p><h2 id="如何解决呢？"><a href="#如何解决呢？" class="headerlink" title="如何解决呢？"></a>如何解决呢？</h2><p>可以使用<code>setter</code>方法来注入，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UserService userService；</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService service)</span> </span>&#123;  </span><br><span class="line">    userService = service;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以正常的进行依赖注入了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做项目的时候有可能会经常发生这样的事情，就是要在静态方法里面调用其他类的方法，如果直接new一个出来的话，有可能会造成该类和该类里面的其他依赖类无法正常的注入，如果直接&lt;code&gt;@Autowired&lt;/code&gt;在这个静态变量上的话会造成该变量还是null。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/categories/Java/"/>
    
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Java" scheme="https://holtenko.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://holtenko.github.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>没事学点设计模式-概览</title>
    <link href="https://holtenko.github.io/blog/2017/09/11/design-pattern-1/"/>
    <id>https://holtenko.github.io/blog/2017/09/11/design-pattern-1/</id>
    <published>2017-09-11T07:27:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h3><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。设计模式使代码编制真正工程化，可以说设计模式是软件工程的基石。合理的使用设计模式可以使我们的代码具有更强的复用性和灵活的扩展性，这里面蕴含了很多前辈的经验，可以帮助我们少走很多弯路，完美地解决很多问题。</p><h3 id="有哪些设计模式"><a href="#有哪些设计模式" class="headerlink" title="有哪些设计模式"></a>有哪些设计模式</h3><p>根据GOF所著的《设计模式-可复用的面向对象软件元素》中提到，共有23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p><table><thead><tr><th align="center">模式</th><th align="left">描述</th><th align="left">细分类型</th></tr></thead><tbody><tr><td align="center">创建型模式</td><td align="left">这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活.</td><td align="left"><a href="/2017/09/29/design-pattern-2">工厂模式（Factory Pattern）</a><br><a href="/2018/02/12/design-pattern-3">抽象工厂模式（Abstract Factory Pattern）</a><br><a href="/2018/03/22/design-pattern-4">单例模式（Singleton Pattern</a><br>建造者模式（Builder Pattern）<br>原型模式（Prototype Pattern）</td></tr><tr><td align="center">结构型模式</td><td align="left">这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td><td align="left">适配器模式（Adapter Pattern）<br>桥接模式（Bridge Pattern）<br>过滤器模式（Filter、Criteria Pattern）<br>组合模式（Composite Pattern）<br>装饰器模式（Decorator Pattern）<br>外观模式（Facade Pattern）<br>享元模式（Flyweight Pattern）<br>代理模式（Proxy Pattern）</td></tr><tr><td align="center">行为型模式</td><td align="left">这些设计模式特别关注对象之间的通信。</td><td align="left">责任链模式（Chain of Responsibility Pattern）<br>命令模式（Command Pattern）<br>解释器模式（Interpreter Pattern）<br>迭代器模式（Iterator Pattern）<br>中介者模式（Mediator Pattern）<br>备忘录模式（Memento Pattern）<br>观察者模式（Observer Pattern）<br>状态模式（State Pattern）<br>空对象模式（Null Object Pattern）<br>策略模式（Strategy Pattern）<br>模板模式（Template Pattern）<br>访问者模式（Visitor Pattern）</td></tr></tbody></table><h3 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h3><ol><li>开闭原则（Open Close Principle）<br>对扩展开放，对修改关闭。在程序需要进行扩展的时候，不去修改原代码，实现热插拔效果。目的是为了使程序的扩展性好，易于维护和升级。为此需要使用接口和抽象类。</li><li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则是面向对象设计的基本原则之一。任何基类可以出现的地方，子类一定可以出现。这个原则是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</li><li>依赖反转原则（Dependence Inversion Principle）<br>这是开闭原则的基础。针对接口编程，依赖于抽象而不依赖于具体。</li><li>接口隔离原则（Interface Segregation Principle）<br>使用多个隔离的接口，比使用单个接口要好。此外还可以降低类之间的耦合度。</li><li>迪米特法则，又称最少知道原则（Demeter Principle）<br>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</li><li>合成复用原则（Composite Reuse Principle）<br>尽量使用合成/聚合的方式，而不是使用继承。</li></ol><p><strong>后面的文章会详细介绍其中部分设计模式</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是设计模式&quot;&gt;&lt;a href=&quot;#什么是设计模式&quot; class=&quot;headerlink&quot; title=&quot;什么是设计模式&quot;&gt;&lt;/a&gt;什么是设计模式&lt;/h3&gt;&lt;p&gt;设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。设计模式使代码编制真正
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://holtenko.github.io/blog/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://holtenko.github.io/blog/2017/09/11/markdown-syntax/"/>
    <id>https://holtenko.github.io/blog/2017/09/11/markdown-syntax/</id>
    <published>2017-09-11T07:27:00.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在这段文字前加 # 号即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表的显示只需要在文字前加上 - 或 * 即可变为无序列表<br>有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在文本前加入 &gt; 这种尖括号（大于号）即可.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 例如这样</span></span><br></pre></td></tr></table></figure><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>插入链接与插入图片的语法很像，区别在一个 !号<br>图片为：<code>![Title](图片URL)</code><br>链接为：<code>[Title](URL)</code></p><h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><p>用两个 * 包含一段文本就是粗体的语法<br>用一个 * 包含一段文本就是斜体的语法。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| col1          | col2          | col3  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">|        1      |   centered    |    3  |</span><br><span class="line">|        2      |   centered    |    4  |</span><br><span class="line">|        3      |               |    5  |</span><br></pre></td></tr></table></figure><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>用两个 ` 把中间的代码包裹起来。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>前后各三`把中间的代码包起来即可。</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线的语法只需要三个 * 号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;在这段文字前加 # 号即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://holtenko.github.io/blog/categories/Tools/"/>
    
    
      <category term="Wiki" scheme="https://holtenko.github.io/blog/tags/Wiki/"/>
    
      <category term="Tools" scheme="https://holtenko.github.io/blog/tags/Tools/"/>
    
      <category term="Markdown" scheme="https://holtenko.github.io/blog/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot那些事(0)-入门篇</title>
    <link href="https://holtenko.github.io/blog/2017/07/21/spring-boot-0-intro/"/>
    <id>https://holtenko.github.io/blog/2017/07/21/spring-boot-0-intro/</id>
    <published>2017-07-21T08:21:53.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是Spring Boot</h4><p>读研期间主要写的是Java后端，工作之后开始更多地接触Node.js写后端程序，有对比才有伤害，让我深深的感受到了Java的重量级，开发的时候各种配置，部署的时候还有一堆要忙活，相对而言Node.js之类的新兴的后端语言显得格外的清新小巧。如果你觉得既然如此就可以就此放弃Java了，那就太草率了，毕竟Java作为后端主流语言不会就这么自甘堕落，Spring Boot应运而生，虽然很早之前就听过Spring Boot的大名，但是碍于当时论文的压力，一直没有深入地去了解，最近项目需要正好可以搞一搞熟悉一下。</p><p>Spring Boot推崇的是”习惯优于配置“，通俗的说可以这么理解，原来一个即使很简单的项目也需要有一大把的配置，但是后来发现很多时候大部分的配置都是一样的，你也会这么配，我也会这么配，但是如果你不知道你就不会配，你仍然需要去了解茫茫多的配置项才能运行一个其实非常简单的项目，当你陷入这种境地的时候，Spring Boot就给你带来了曙光，你可以摆脱大部分的通用配置，框架内置一套习惯的配置，你只需要对你需要的部分进行定制即可。</p><p>以前Java项目另外一个痛点就是部署，项目无论大小都需要配置一台服务器(Tomcat等)，然后把项目打包部署上去，所以你还要懂一套服务器部署的内容，可是明明有些项目就很简单啊，非要搞这么复杂，Spring Boot则告诉你，原来Java项目开发也可以很简单，框架内置了一个轻量级的Servlet容器(Tomcat或者Jetty等)，让你很容易地创建一个独立运行项目，只需一个命令，你就可以向运行普通Java程序一样运行一个Java后端程序，是不是很爽！</p><h4 id="Spring-Boot主要特点"><a href="#Spring-Boot主要特点" class="headerlink" title="Spring Boot主要特点"></a>Spring Boot主要特点</h4><ol><li><p>能够独立运行<br>Spring Boot创建的程序最终会打成一个jar包，因此，只需要<code>java -jar your-project-name.jar</code>一句命令就可以运行起来了。</p></li><li><p>内置Servlet容器<br>Spring Boot项目会内置一个容器，如Tomcat、Jetty等，这样我们就不需要再额外配置服务器去部署了。</p></li><li><p>自动装配<br>从spring最原始的xml配置bean一路走来，曾几何时觉得<code>@Autowired</code>自动装配已经非常好用了，而Spring Boot则可以根据类路径中的jar包、类，为jar包里的类自动装配bean，这样就更进一步地减少了配置的工作量。但是嘛，自动的总会出问题的，它并不能帮你解决任何问题，当你发现它做的不够的时候，还是需要手动地去配置一下，但是相比而言，它也能够应付一部分场景了。</p></li><li><p>摆脱繁杂的XML和代码配置<br>Spring 4.x里已经可以通过注解来实现配置了，而Spring Boot则把这一特性发挥到了极致，一个项目里你甚至可以不写一行xml，不写一行配置代码，就可以完成。</p></li><li><p>简化的Maven配置</p></li></ol><p>Maven的出现已经可以帮我解决了很多依赖的问题，不用再一个一个jar包去下载导入，但是有没有这么一种感觉，我还是要在pom里面写很多，而且有时候我根本不知道要添加哪个jar包，这一点Spring Boot也想到了，它提供了一系列starter来简化Maven依赖，比如你只需要添加一个<code>spring-boot-starter-web</code>，如下，就可添加web开发中常用的依赖包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="从哪里开始"><a href="#从哪里开始" class="headerlink" title="从哪里开始"></a>从哪里开始</h4><ol><li><a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a><br>说了那么多Spring Boot的好处，怎么开始呢？这一点也充分体现了其简单的特点，非常方便。</li></ol><p>访问<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> ，就可以看到Spring Boot官方的项目生成页面，你只需要填写项目的信息，选择一下依赖，然后点击<code>Generate Project</code>就可以生成项目文件并下载zip包。</p><p>在这里可以选择使用Maven管理还是Gradle管理项目依赖，使用Java、Kotlin还是Groovy，还有Spring Boot的版本，打包方式，Java版本，等等，其他的可以自行查看。当然即使生成项目的时候填错了也没关系，后面还可以改嘛。</p><ol start="2"><li>手动创建<br>求人不如求己，有时候你还是需要知道如何手动的去创建一个项目，说到底，所有的生成工具帮你生成还是一个Maven项目，或者Gradle项目，只不过是帮你填写好了一些信息而已，你完全可以自己手动填写。</li></ol><p>这里以Maven项目为例：</p><ol><li>首先你需要新建一个空的Maven项目，这个就不说了，不会的去面壁；</li><li>添加Spring Boot父依赖，提供相关的默认依赖，指定版本号，如下；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>添加相关starter</li></ol><p>比如这里添加了web支持和security支持：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>添加编译插件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>完成</p></li><li><p>其他方式<br>除了这两种方式之外还有其他一些方式，比如Spring Boot CLI、Spring Tool Suite等等，这些就不做介绍了。</p></li></ol><h4 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h4><p>这里采用在<code>http://start.spring.io</code>上新建项目后下载，这是下载之后的文件目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── mvnw</span><br><span class="line">├── mvnw.cmd</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── site</span><br><span class="line">    │   │       └── holten</span><br><span class="line">    │   │           └── springboot0</span><br><span class="line">    │   │               └── Springboot0Application.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       └── application.properties</span><br><span class="line">    └── <span class="built_in">test</span></span><br><span class="line">        └── java</span><br><span class="line">            └── site</span><br><span class="line">                └── holten</span><br><span class="line">                    └── springboot0</span><br><span class="line">                        └── Springboot0ApplicationTests.java</span><br><span class="line">12 directories, 6 files</span><br></pre></td></tr></table></figure><p>我们首先看一下pom.xml，这里只添加了web starter：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>site.holten<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作为简单示例，我们直接在<code>Springboot0Application.java</code>中编写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.holten.springboot0;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot0Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot0Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">homepage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is home page!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里了解这么几点就可以了：</p><ul><li><code>SpringApplication.run(Springboot0Application.class, args)</code>：main方法中的这句话用来指定程序的入口；</li><li><code>@SpringBootApplication</code>：这个是最重要的，标识着这是一个Spring Boot项目，开启自动配置；</li><li><code>@RestController</code>：这个是Spring MVC里面的注解，组合了<code>@Controller</code>和<code>@ResponseBody</code>；</li><li><code>@RequestMapping</code>：用来映射请求路径/参数、处理类和方法；</li><li><code>@Controller</code>：表明这是一个Spring MVC的Controller，Dispatcher Servlet会自动扫描该类，发现其中的<code>@RequestMapping</code>注解并映射；</li><li><code>@ResponseBody</code>：用来支持把返回值放到response体内；</li></ul><p>代码写完了，如何运行呢？</p><ul><li>如果你是用的IDE，那么直接run或者debug就可以了；</li><li>如果没有，可以在命令行里运行<code>mvn spring-boot:run</code>，当然，前提是你要安装了maven，并且在项目根目录下；</li><li>然后在地址栏输入<code>http://localhost:8080/</code>或者<code>http://localhost:8080/hello/yourname</code>就可以看到结果了；</li></ul><p>具体效果就不贴图了，自行体会～～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是Spring-Boot&quot;&gt;&lt;a href=&quot;#什么是Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;什么是Spring Boot&quot;&gt;&lt;/a&gt;什么是Spring Boot&lt;/h4&gt;&lt;p&gt;读研期间主要写的是Java后端，工作之后开始
      
    
    </summary>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://holtenko.github.io/blog/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java中创建线程的两种方式</title>
    <link href="https://holtenko.github.io/blog/2016/10/17/java-create-threads/"/>
    <id>https://holtenko.github.io/blog/2016/10/17/java-create-threads/</id>
    <published>2016-10-17T08:10:15.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>多线程是我们开发过程中经常遇到的，也是必不可少需要掌握的。当我们知道需要进行多线程开发时首先需要知道的自然是如何实现多线程，也就是我们应该如何创建线程。</p><p>在Java中创建线程和创建普通的类的对象操作是一样的，我们可以通过两种方式来创建线程：</p><ol><li>继承Thread类，并重写run()方法。</li><li>实现Runnable接口，并实现run()方法。</li></ol><h4 id="方法一：继承Thread类"><a href="#方法一：继承Thread类" class="headerlink" title="方法一：继承Thread类"></a>方法一：继承Thread类</h4><p>代码非常简单</p><ol><li>首先重载一个构造函数，以便我们可以给线程命名。</li><li>重写run()方法。</li><li>这里我们先让线程输出线程名+start。</li><li>然后每5ms输出线程名+一个递增数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by holten.gao on 2016/10/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">threadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">threadThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" start!"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName()+<span class="string">" "</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：实现Runnable接口"><a href="#方法二：实现Runnable接口" class="headerlink" title="方法二：实现Runnable接口"></a>方法二：实现Runnable接口</h4><p>代码也非常简单</p><ol><li>实现run()方法。</li><li>这里我们先让线程输出线程名+start。</li><li>然后每5ms输出线程名+一个递增数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by holten.gao on 2016/10/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">runnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" start!"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" "</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by holten.gao on 2016/10/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread threadThread=<span class="keyword">new</span> threadThread(<span class="string">"threadThread"</span>);</span><br><span class="line">        threadThread.start();</span><br><span class="line">        Thread runnableThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> runnableThread(),<span class="string">"runnableThread"</span>);</span><br><span class="line">        runnableThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">threadThread start!</span><br><span class="line">threadThread 0</span><br><span class="line">runnableThread start!</span><br><span class="line">runnableThread 0</span><br><span class="line">threadThread 1</span><br><span class="line">runnableThread 1</span><br><span class="line">threadThread 2</span><br><span class="line">runnableThread 2</span><br><span class="line">threadThread 3</span><br><span class="line">runnableThread 3</span><br><span class="line">threadThread 4</span><br><span class="line">runnableThread 4</span><br><span class="line">threadThread 5</span><br><span class="line">runnableThread 5</span><br><span class="line">threadThread 6</span><br><span class="line">runnableThread 6</span><br><span class="line">threadThread 7</span><br><span class="line">runnableThread 7</span><br><span class="line">threadThread 8</span><br><span class="line">runnableThread 8</span><br><span class="line">threadThread 9</span><br><span class="line">runnableThread 9</span><br></pre></td></tr></table></figure><h4 id="两种方法比较"><a href="#两种方法比较" class="headerlink" title="两种方法比较"></a>两种方法比较</h4><ol><li>因为Java只支持单继承，所以使用方法一就不能再继承其他类了；而方法二实现接口则不会影响继承其他类。</li><li>方法一由于是继承Thread，所以直接new出来就可以start；而方法二需要将对象作为参数传入Thread对象才能得到Thread对象。</li><li>方法一中可以直接通过this.getName获得线程名；而方法二需要Thread.currentThread().getName()获得</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;多线程是我们开发过程中经常遇到的，也是必不可少需要掌握的。当我们知道需要进行多线程开发时首先需要知道的自然是如何实现多线程，也就是我们应该如
      
    
    </summary>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/tags/Java/"/>
    
      <category term="线程" scheme="https://holtenko.github.io/blog/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Thread" scheme="https://holtenko.github.io/blog/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>Java中字符串内存位置浅析</title>
    <link href="https://holtenko.github.io/blog/2016/08/16/string-memory/"/>
    <id>https://holtenko.github.io/blog/2016/08/16/string-memory/</id>
    <published>2016-08-16T05:12:56.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前写过一篇关于<a href="/2016/04/09/jvm-memory-area/">JVM内存区域划分</a>的文章，但是昨天接到蚂蚁金服的面试，问到JVM相关的内容，解释一下JVM的内存区域划分，这部分答得还不错，但是后来又问了Java里面String存放的位置，之前只记得String是一个不变的量，应该是要存放在常量池里面的，但是后来问到new一个String出来应该是放到哪里的，这个应该是放到堆里面的，后来又问到String的引用是放在什么地方的，当时傻逼的说也是放在堆里面的，现在总结一下：基本类型的变量数据和对象的引用都是放在栈里面的，对象本身放在堆里面，显式的String常量放在常量池，String对象放在堆中。</p><h3 id="常量池的说明"><a href="#常量池的说明" class="headerlink" title="常量池的说明"></a>常量池的说明</h3><p>常量池之前是放在方法区里面的，也就是在永久代里面的，从JDK7开始移到了堆里面。这一改变我们可以从oracle的<a href="http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html" target="_blank" rel="noopener">release version</a>的notes里的** Important RFEs Addressed in JDK 7 **看到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Area: HotSpot</span><br><span class="line">Synopsis: In JDK 7, interned strings are no longer allocated in the permanent </span><br><span class="line">generation of the Java heap, but are instead allocated in the main part of the </span><br><span class="line">Java heap (known as the young and old generations), along with the other </span><br><span class="line">objects created by the application. This change will result in more data </span><br><span class="line">residing in the main Java heap, and less data in the permanent generation, and </span><br><span class="line">thus may require heap sizes to be adjusted. Most applications will see only </span><br><span class="line">relatively small differences in heap usage due to this change, but larger </span><br><span class="line">applications that load many classes or make heavy use of the String.intern() </span><br><span class="line">method will see more significant differences.</span><br><span class="line">RFE: 6962931</span><br></pre></td></tr></table></figure><h3 id="String内存位置说明"><a href="#String内存位置说明" class="headerlink" title="String内存位置说明"></a>String内存位置说明</h3><p>1.显式的String常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"holten"</span>;</span><br><span class="line">String b = <span class="string">"holten"</span>;</span><br></pre></td></tr></table></figure><ul><li>第一句代码执行后就在常量池中创建了一个值为holten的String对象；</li><li>第二句执行时，因为常量池中存在holten所以就不再创建新的String对象了。</li><li>此时该字符串的引用在虚拟机栈里面。</li></ul><p>2.String对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="keyword">new</span> String(<span class="string">"holtenObj"</span>);</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">"holtenObj"</span>);</span><br></pre></td></tr></table></figure><ul><li>Class被加载时就在常量池中创建了一个值为holtenObj的String对象，第一句执行时会在堆里创建new String(“holtenObj”)对象；</li><li>第二句执行时，因为常量池中存在holtenObj所以就不再创建新的String对象了，直接在堆里创建new String(“holtenObj”)对象。</li></ul><h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by holten.gao on 2016/8/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"高小天"</span>;</span><br><span class="line">        String str2 = <span class="string">"高小天"</span>;</span><br><span class="line">        System.out.println(str1==str2);<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        String str3 = <span class="keyword">new</span> String(<span class="string">"高大天"</span>);</span><br><span class="line">        String str4 = <span class="keyword">new</span> String(<span class="string">"高大天"</span>);</span><br><span class="line">        System.out.println(str3==str4);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前写过一篇关于&lt;a href=&quot;/2016/04/09/jvm-memory-area/&quot;&gt;JVM内存区域划分&lt;/a&gt;的文章，但是昨天接到
      
    
    </summary>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/tags/Java/"/>
    
      <category term="内存" scheme="https://holtenko.github.io/blog/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="String" scheme="https://holtenko.github.io/blog/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Lombok介绍及使用方法</title>
    <link href="https://holtenko.github.io/blog/2016/08/02/lombok-introduction/"/>
    <id>https://holtenko.github.io/blog/2016/08/02/lombok-introduction/</id>
    <published>2016-08-02T03:19:01.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lombok简介"><a href="#lombok简介" class="headerlink" title="lombok简介"></a>lombok简介</h3><p>lombok是暑假来到公司实习的时候发现的一个非常好用的小工具，刚见到的时候就感觉非常惊艳，有一种相见恨晚的感觉，用了一段时间之后感觉的确挺不错，所以特此来推荐一下。</p><p><a href="https://projectlombok.org/" target="_blank" rel="noopener">lombok的官方地址：https://projectlombok.org/</a></p><p><a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">lombok的Github地址：https://github.com/rzwitserloot/lombok</a></p><p>那么lombok到底是个什么呢，lombok是一个可以通过简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 Java 代码的工具，简单来说，比如我们新建了一个类，然后在其中写了几个字段，然后通常情况下我们需要手动去建立getter和setter方法啊，构造函数啊之类的，lombok的作用就是为了省去我们手动创建这些代码的麻烦，它能够在我们编译源码的时候自动帮我们生成这些方法。</p><p>lombok能够达到的效果就是在源码中不需要写一些通用的方法，但是在编译生成的字节码文件中会帮我们生成这些方法，这就是lombok的神奇作用。</p><p>虽然有人可能会说IDE里面都自带自动生成这些方法的功能，但是使用lombok会使你的代码看起来更加简洁，写起来也更加方便。</p><h3 id="lombok安装"><a href="#lombok安装" class="headerlink" title="lombok安装"></a>lombok安装</h3><p>lombok的安装跟一般引用jar包没有什么区别，可以到官网上下载最新的jar包，然后导入到项目里面就好啦。</p><p><strong>Maven添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Intellij idea开发的话需要安装Lombok plugin，同时设置 Setting -&gt; Compiler -&gt; Annotation Processors -&gt; Enable annotation processing勾选。</p><h3 id="lombok使用"><a href="#lombok使用" class="headerlink" title="lombok使用"></a>lombok使用</h3><p>lombok使用过程中主要是靠注解起作用的，官网上的文档里面有所有的注解，这里不一一罗列，只说明其中几个比较常用的。</p><h4 id="NonNull-可以帮助我们避免空指针。"><a href="#NonNull-可以帮助我们避免空指针。" class="headerlink" title="@NonNull: 可以帮助我们避免空指针。"></a><code>@NonNull</code>: 可以帮助我们避免空指针。</h4><p>使用lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">        <span class="keyword">if</span> (person == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"person"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cleanup-自动帮我们调用close-方法。"><a href="#Cleanup-自动帮我们调用close-方法。" class="headerlink" title="@Cleanup: 自动帮我们调用close()方法。"></a><code>@Cleanup</code>: 自动帮我们调用<code>close()</code>方法。</h4><p>使用lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Cleanup;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="meta">@Cleanup</span> OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">            <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            out.write(b, <span class="number">0</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">                    <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                    out.write(b, <span class="number">0</span>, r);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Getter-Setter-自动生成Getter-Setter方法"><a href="#Getter-Setter-自动生成Getter-Setter方法" class="headerlink" title="@Getter / @Setter: 自动生成Getter/Setter方法"></a><code>@Getter / @Setter</code>: 自动生成Getter/Setter方法</h4><p>使用lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Setter</span>(AccessLevel.PROTECTED) <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NoArgsConstructor-自动生成无参数构造函数。"><a href="#NoArgsConstructor-自动生成无参数构造函数。" class="headerlink" title="@NoArgsConstructor: 自动生成无参数构造函数。"></a><code>@NoArgsConstructor</code>: 自动生成无参数构造函数。</h4><h4 id="AllArgsConstructor-自动生成全参数构造函数。"><a href="#AllArgsConstructor-自动生成全参数构造函数。" class="headerlink" title="@AllArgsConstructor: 自动生成全参数构造函数。"></a><code>@AllArgsConstructor</code>: 自动生成全参数构造函数。</h4><h4 id="Data-自动为所有字段添加-ToString-EqualsAndHashCode-Getter方法，为非final字段添加-Setter-和-RequiredArgsConstructor"><a href="#Data-自动为所有字段添加-ToString-EqualsAndHashCode-Getter方法，为非final字段添加-Setter-和-RequiredArgsConstructor" class="headerlink" title="@Data: 自动为所有字段添加@ToString, @EqualsAndHashCode, @Getter方法，为非final字段添加@Setter,和@RequiredArgsConstructor!"></a><code>@Data</code>: 自动为所有字段添加@ToString, @EqualsAndHashCode, @Getter方法，为非final字段添加@Setter,和@RequiredArgsConstructor!</h4><p><strong><em>还有其他一些比如自动生成日志对象等等之类的注解可以到官方网站去了解，就不一一列举了。</em></strong></p><p><strong><a href="https://projectlombok.org/features/index.html" target="_blank" rel="noopener">官方文档https://projectlombok.org/features/index.html</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;lombok简介&quot;&gt;&lt;a href=&quot;#lombok简介&quot; class=&quot;headerlink&quot; title=&quot;lombok简介&quot;&gt;&lt;/a&gt;lombok简介&lt;/h3&gt;&lt;p&gt;lombok是暑假来到公司实习的时候发现的一个非常好用的小工具，刚见到的时候就感觉非常惊艳，
      
    
    </summary>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="https://holtenko.github.io/blog/tags/Java/"/>
    
      <category term="Plugin" scheme="https://holtenko.github.io/blog/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>排序算法之冒泡排序</title>
    <link href="https://holtenko.github.io/blog/2016/05/08/bubble-sort/"/>
    <id>https://holtenko.github.io/blog/2016/05/08/bubble-sort/</id>
    <published>2016-05-08T08:43:27.000Z</published>
    <updated>2019-12-12T02:37:32.211Z</updated>
    
    <content type="html"><![CDATA[<html><head><style type="text/css">                            .mjpage .MJX-monospace {                            font-family: monospace                            }                            .mjpage .MJX-sans-serif {                            font-family: sans-serif                            }                            .mjpage {                            display: inline;                            font-style: normal;                            font-weight: normal;                            line-height: normal;                            font-size: 100%;                            font-size-adjust: none;                            text-indent: 0;                            text-align: left;                            text-transform: none;                            letter-spacing: normal;                            word-spacing: normal;                            word-wrap: normal;                            white-space: nowrap;                            float: none;                            direction: ltr;                            max-width: none;                            max-height: none;                            min-width: 0;                            min-height: 0;                            border: 0;                            padding: 0;                            margin: 0                            }                            .mjpage * {                            transition: none;                            -webkit-transition: none;                            -moz-transition: none;                            -ms-transition: none;                            -o-transition: none                            }                            .mjx-svg-href {                            fill: blue;                            stroke: blue                            }                            .MathJax_SVG_LineBox {                            display: table!important                            }                            .MathJax_SVG_LineBox span {                            display: table-cell!important;                            width: 10000em!important;                            min-width: 0;                            max-width: none;                            padding: 0;                            border: 0;                            margin: 0                            }                            .mjpage__block {                            text-align: center;                            margin: 1em 0em;                            position: relative;                            display: block!important;                            text-indent: 0;                            max-width: none;                            max-height: none;                            min-width: 0;                            min-height: 0;                            width: 100%                            }</style></head><body><h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>冒泡排序是一种最基础也是最简单的排序算法，它是一种<strong>稳定</strong>排序算法，其平均时间复杂度为<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="6.032ex" height="3.009ex" style="vertical-align: -0.838ex;" viewBox="0 -934.9 2596.9 1295.7" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-1-Title"><title id="MathJax-SVG-1-Title">O(n^2)</title><defs aria-hidden="true"><path stroke-width="1" id="E1-MJMATHI-4F" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path stroke-width="1" id="E1-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path stroke-width="1" id="E1-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="1" id="E1-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path stroke-width="1" id="E1-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"> <use xlink:href="#E1-MJMATHI-4F" x="0" y="0"></use> <use xlink:href="#E1-MJMAIN-28" x="763" y="0"></use><g transform="translate(1153,0)"> <use xlink:href="#E1-MJMATHI-6E" x="0" y="0"></use> <use transform="scale(0.707)" xlink:href="#E1-MJMAIN-32" x="849" y="513"></use></g> <use xlink:href="#E1-MJMAIN-29" x="2207" y="0"></use></g></svg></span>，空间复杂度为<span class="mjpage"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="4.745ex" height="2.843ex" style="vertical-align: -0.838ex;" viewBox="0 -863.1 2043 1223.9" role="img" focusable="false" xmlns="http://www.w3.org/2000/svg" aria-labelledby="MathJax-SVG-2-Title"><title id="MathJax-SVG-2-Title">O(1)</title><defs aria-hidden="true"><path stroke-width="1" id="E2-MJMATHI-4F" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path stroke-width="1" id="E2-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path stroke-width="1" id="E2-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path stroke-width="1" id="E2-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)" aria-hidden="true"> <use xlink:href="#E2-MJMATHI-4F" x="0" y="0"></use> <use xlink:href="#E2-MJMAIN-28" x="763" y="0"></use> <use xlink:href="#E2-MJMAIN-31" x="1153" y="0"></use> <use xlink:href="#E2-MJMAIN-29" x="1653" y="0"></use></g></svg></span>，是一种原地排序算法。</p><h3 id="算法原理-从后往前冒泡"><a href="#算法原理-从后往前冒泡" class="headerlink" title="算法原理(从后往前冒泡)"></a>算法原理(从后往前冒泡)</h3><p>冒泡排序的思想其实很简单，就是从最后一个元素开始，依次与其前面的元素作比较，如果位置错误就交换位置，否则不采取操作，一直到第一个元素，此时第一个元素一定是最大(最小)的元素；然后重复上述操作一直到第二个元素；然后一直对越来越少的元素进行比较和交换位置；直到所有元素都不再需要比较，排序完成。</p><h3 id="算法实现-Java"><a href="#算法实现-Java" class="headerlink" title="算法实现(Java)"></a>算法实现(Java)</h3><p>该示例为从小到大排序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a.length - <span class="number">1</span>; j &gt; i; j--) {</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j - <span class="number">1</span>]) exch(a, j, j - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="排序过程及结果"><a href="#排序过程及结果" class="headerlink" title="排序过程及结果"></a>排序过程及结果</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Origin:</span><br><span class="line">2 1 6 4 9 5 3 1 7 8</span><br><span class="line">Process:</span><br><span class="line">2 1 6 4 9 5 1 3 7 8</span><br><span class="line">2 1 6 4 9 1 5 3 7 8</span><br><span class="line">2 1 6 4 1 9 5 3 7 8</span><br><span class="line">2 1 6 1 4 9 5 3 7 8</span><br><span class="line">2 1 1 6 4 9 5 3 7 8</span><br><span class="line">1 2 1 6 4 9 5 3 7 8</span><br><span class="line">1 2 1 6 4 9 3 5 7 8</span><br><span class="line">1 2 1 6 4 3 9 5 7 8</span><br><span class="line">1 2 1 6 3 4 9 5 7 8</span><br><span class="line">1 2 1 3 6 4 9 5 7 8</span><br><span class="line">1 1 2 3 6 4 9 5 7 8</span><br><span class="line">1 1 2 3 6 4 5 9 7 8</span><br><span class="line">1 1 2 3 4 6 5 9 7 8</span><br><span class="line">1 1 2 3 4 6 5 7 9 8</span><br><span class="line">1 1 2 3 4 5 6 7 9 8</span><br><span class="line">1 1 2 3 4 5 6 7 8 9</span><br><span class="line">Result:</span><br><span class="line">1 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;
                            .mjpage .MJX-monospace {
                            font-family: monospace

      
    
    </summary>
    
    
      <category term="算法" scheme="https://holtenko.github.io/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="https://holtenko.github.io/blog/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="https://holtenko.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
