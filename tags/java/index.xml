<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on HoltenBlog</title><link>https://holtenko.github.io/blog/tags/java/</link><description>Recent content in Java on HoltenBlog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 21 Jul 2017 16:21:53 +0000</lastBuildDate><atom:link href="https://holtenko.github.io/blog/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot那些事(0)-入门篇</title><link>https://holtenko.github.io/blog/2017/07/spring-boot-0-intro/</link><pubDate>Fri, 21 Jul 2017 16:21:53 +0000</pubDate><guid>https://holtenko.github.io/blog/2017/07/spring-boot-0-intro/</guid><description>什么是Spring Boot 读研期间主要写的是Java后端，工作之后开始更多地接触Node.js写后端程序，有对比才有伤害，让我深深的感受到了Jav</description></item><item><title>Java中创建线程的两种方式</title><link>https://holtenko.github.io/blog/2016/10/java-create-threads/</link><pubDate>Mon, 17 Oct 2016 16:10:15 +0000</pubDate><guid>https://holtenko.github.io/blog/2016/10/java-create-threads/</guid><description>前言 多线程是我们开发过程中经常遇到的，也是必不可少需要掌握的。当我们知道需要进行多线程开发时首先需要知道的自然是如何实现多线程，也就是我们应</description></item><item><title>Java中字符串内存位置浅析</title><link>https://holtenko.github.io/blog/2016/08/string-memory/</link><pubDate>Tue, 16 Aug 2016 13:12:56 +0000</pubDate><guid>https://holtenko.github.io/blog/2016/08/string-memory/</guid><description>前言 之前写过一篇关于JVM内存区域划分的文章，但是昨天接到蚂蚁金服的面试，问到JVM相关的内容，解释一下JVM的内存区域划分，这部分答得还不</description></item><item><title>Lombok介绍及使用方法</title><link>https://holtenko.github.io/blog/2016/08/lombok-introduction/</link><pubDate>Tue, 02 Aug 2016 11:19:01 +0000</pubDate><guid>https://holtenko.github.io/blog/2016/08/lombok-introduction/</guid><description>lombok简介 lombok是暑假来到公司实习的时候发现的一个非常好用的小工具，刚见到的时候就感觉非常惊艳，有一种相见恨晚的感觉，用了一段时</description></item><item><title>JVM内存回收对象及引用分析</title><link>https://holtenko.github.io/blog/2016/04/jvm-gc-object-reference/</link><pubDate>Thu, 21 Apr 2016 21:58:36 +0000</pubDate><guid>https://holtenko.github.io/blog/2016/04/jvm-gc-object-reference/</guid><description>自动垃圾回收是Java相较于C++的一个重要的特点，想了解JVM的垃圾回收机制，首先我们要知道垃圾回收是回收什么地方的垃圾，我在我的上一篇博</description></item><item><title>JVM内存区域划分</title><link>https://holtenko.github.io/blog/2016/04/jvm-memory-area/</link><pubDate>Sat, 09 Apr 2016 15:20:35 +0000</pubDate><guid>https://holtenko.github.io/blog/2016/04/jvm-memory-area/</guid><description>学习Java不可避免的要学习Java虚拟机，也就是JVM，Java虚拟机规范里面规定了程序运行期间会使用到的运行时数据区，这也是JVM的内存</description></item><item><title>Java利用Rxtx进行串口通讯</title><link>https://holtenko.github.io/blog/2015/12/rxtx-comm/</link><pubDate>Sat, 05 Dec 2015 16:04:02 +0000</pubDate><guid>https://holtenko.github.io/blog/2015/12/rxtx-comm/</guid><description>最近在做传感器数据采集的工作，底层是基于Zigbee的无线传感网络，所有数据采集到Zigbee协调器上然后通知上位机数据采集完成，上位机通过</description></item><item><title>Linux环境下RPM方式JDK安装及配置</title><link>https://holtenko.github.io/blog/2015/11/jdk-install/</link><pubDate>Wed, 25 Nov 2015 13:48:22 +0000</pubDate><guid>https://holtenko.github.io/blog/2015/11/jdk-install/</guid><description>jdk下载 这个到java的官方网站下载自己需要的版本就好了，这里下载了jdk1.7版本的，选择下载了rpm包jdk-7u79-linux-x</description></item></channel></rss>